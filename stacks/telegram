#!/usr/bin/env sh
# shellcheck source=/dev/null
#
# Copyright (C) 2019 Raphielscape LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#
# Telegram command container

TELEGRAM="${SCRIPTDIR}"/telegram/telegram

# Caster configurations
MAINGROUP_ID="-1001140871591"
BUILDSCAPERER_ID="-1001153251064"
DEBUG_ID="-1001279397127"

# Graphics Interchange Format Assets
Start_Asset="CAADBQADPQIAAp_oJQqaAAHES5FWFaoC"
Stop_Asset="https://thumbs.gfycat.com/ChiefComplexInganue-size_restricted.gif"
Jump_Asset="https://thumbs.gfycat.com/ChiefComplexInganue-size_restricted.gif"

# GIF Stuff
tg_build_sendsticker() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/SendSticker" \
    -d sticker="${Start_Asset}" \
    -d chat_id=${BUILDSCAPERER_ID} >> /dev/null
}

tg_buildmain_sendgif() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/SendAnimation" \
    -d animation="${Jump_Asset}" \
    -d chat_id=${MAINGROUP_ID} >> /dev/null
}

# Interruption Happen, report with GIF
tg_intgif() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/SendAnimation" \
    -d animation="${Stop_Asset}" \
    -d chat_id=${BUILDSCAPERER_ID} >> /dev/null
}

tg_intgifmain() {
    curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/SendAnimation" \
    -d animation="${Stop_Asset}" \
    -d chat_id=${MAINGROUP_ID} >> /dev/null
}

# Push to Channel
push() {
    "${TELEGRAM}" -f "${ZIP_DIR}/$ZIPNAME" \
    -c ${BUILDSCAPERER_ID}
}

# sendcast to group
tg_sendinfo() {
    "${TELEGRAM}" -c ${MAINGROUP_ID} -H \
    "$(
		for POST in "${@}"; do
			echo "${POST}"
		done
    )"
}

# sendcast to channel
tg_channelcast() {
    "${TELEGRAM}" -c ${BUILDSCAPERER_ID} -H \
    "$(
		for POST in "${@}"; do
			echo "${POST}"
		done
    )"
}

# Debugcasting
tg_debugcast() {
    "${TELEGRAM}" -c ${DEBUG_ID} -H \
    "$(
		for POST in "${@}"; do
			echo "${POST}"
		done
    )"
}

kickstart_pub() {
    tg_sendinfo "Compilation Rolled! Clocked at $(date +%Y%m%d-%H%M)"
    tg_build_sendsticker

    tg_channelcast "Compiler <code>${COMPILER_USED}</code>" \
    "Device <b>${DEVICE}</b>" \
    "Branch <code>${PARSE_BRANCH}</code>" \
    "Commit Point <code>${COMMIT_POINT}</code>" \
    "Under <code>$(hostname)</code>" \
    "Clocked at <code>$(date +%Y%m%d-%H%M)</code>" \
    "Started on <code>$(whoami)</code>"
}

kickstart_release() {
    tg_buildmain_sendgif
    tg_sendinfo "Release Beeld Rolled! Clocked at $(date +%Y%m%d-%H%M)"

    tg_channelcast "Compiler <code>${COMPILER_USED}</code>" \
    "Device <b>${DEVICE}</b>" \
    "Branch <code>${PARSE_BRANCH}</code>" \
    "Commit Point <code>${COMMIT_POINT}</code>" \
    "Under <code>$(hostname)</code>" \
    "Clocked at <code>$(date +%Y%m%d-%H%M)</code>" \
    "Started on <code>$(whoami)</code>"

    tg_sendinfo "This ${COMPILER_USED} build will be pushed separately under Release tag" \
                "You can sleep until I done lewding Hat Kid"
}

# Whenever errors occured, report them
tg_senderror() {
    tg_sendinfo "Build Throwing Error(s)" \
    "@raphielscape naaaaa"

    if [ "${ZIP_UPLOAD}" = true ]; then
        tg_channelcast "Build Throwing Error(s)"
    else
        tg_debugcast "Build Throwing Error(s)"
    fi

    [ -n "${STATUS}" ] &&
    exit "${STATUS}" ||
    exit 1
}

# Fin Prober
fin() {
    header "Yay! My works took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds.~"
    tg_sendinfo "Build for ${DEVICE} with ${COMPILER_USED} took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds"
    if [ "${ZIP_UPLOAD}" = true ]; then
        tg_channelcast "Build for ${DEVICE} with ${COMPILER_USED} took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds"
    fi
}

# Errored Prober
finerr() {
    header "My works took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds but it's error..."
    tg_sendinfo "Build for ${DEVICE} with ${COMPILER_USED} took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds" \
                "but it is having error anyways xd"
    tg_senderror
    exit 1
}
