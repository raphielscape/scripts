#!/usr/bin/env bash
# shellcheck source=/dev/null
# shellcheck disable=SC1004
#
# Copyright (C) 2018 Raphielscape LLC.
#
# Licensed under the Raphielscape Public License, Version 1.0 (the "License");
# you may not use this file except in compliance with the License.
#
# Environment container

# Export script directory at the beginning
SCRIPTDIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# Import stack
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/stacks/stackies

# Sourcedir
SRCDIR="${KERNELDIR}"
OUTDIR="${KERNELDIR}/out"

# Parser
PARSE_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
PARSE_ORIGIN="$(git config --get remote.origin.url)"
COMMIT_POINT="$(git log --pretty=format:'%h : %s' -1)"

TELEGRAM="${SCRIPTDIR}"/telegram/telegram
TELEGRAM_TOKEN=${BOT_API_KEY}

export TELEGRAM_TOKEN PARSE_BRANCH PARSE_ORIGIN COMMIT_POINT SRCDIR OUTDIR

# Alias echo as teller
function echo() {
	command echo -e "${@}"
}

function bold() {
	command tput bold
}

function colorize() {
	command tput setaf "${@}"
}

function decolorize() {
	command tput sgr0
}

# Colorize errors
function display_error() {
	echo
	echo "$(tputaf "${RED}")${1}$(tputz)"
	[[ -z ${2} ]] && echo
}

# Throw errors in red
function die() {
	display_error "${@}"
	exit
}

# Header colorizer
function header() {
	if [[ -n ${2} ]]; then
		COLOR=${2}
	else
		COLOR=${RED}
	fi
	colorize "${COLOR}"
	echo "====$(for i in $(seq ${#1}); do echo "=\\c"; done)===="
	echo "==  ${1}  =="
	# SC2034: i appears unused. Verify it or export it.
	# shellcheck disable=SC2034
	echo "====$(for i in $(seq ${#1}); do echo "=\\c"; done)===="
	decolorize
}

# Device Identifier
function mido() {
	export DEVICE=mido
	export DEFCONFIG="raph_defconfig"
}

function beryllium() {
	export DEVICE=beryllium
	export DEFCONFIG="raph_beryllium_defconfig"
}

function kernelbox() {
	ANYKERNEL="${HOME}/working/AnyKernel2"
	ZIP_DIR="${HOME}/working/weeb_zip"
}

export ANYKERNEL ZIP_DIR KBUILD_BUILD_USER TOOLCHAIN

# Delett Old AnyKernel in Aroma dir if exists
rm -rf "${ANYKERNEL_DONE}"

function prepare_clang() {
	header "We're building Clang bois" "${GREEN}"

		# Clang configurations
		PATH=${HOME}/toolchains/clang-8.x/bin/:$PATH
		CLANG_TCHAIN="clang"
		TCHAIN_PATH="aarch64-linux-gnu-"
		CLANG_TRIPLE="aarch64-linux-gnu-"

		# Kbuild Sets
		KBUILD_COMPILER_STRING="$(${CLANG_TCHAIN} --version | head -n 1 |
			perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
		CROSS_COMPILE="${TCHAIN_PATH}"

		# Export the make
		MAKE="make O=${OUTDIR} CC=${CLANG_TCHAIN}"

		# Export compiler for announcer
		COMPILER_USED="$(${CLANG_TCHAIN} --version | head -n 1 |
			perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
		CU=clang

	# Scream out the Clang compiler used
	header "Using toolchain: $(${CLANG_TCHAIN} --version | head -n 1 |
		perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
}

function prepare_gcc() {
	if [[ ${WORKER} == raphielbox ]]; then
		export CROSS_COMPILE="aarch64-linux-gnu-"
		header "Using toolchain: $("${CROSS_COMPILE}"gcc --version | head -1)"
	fi

	COMPILER_USED=GCC
	MAKE="make O=${OUTDIR}"

	# Compilation announcer stuff
	CU=gcc
}

# Then export the stuff
export PATH CU COMPILER_USED CLANG_TCHAIN TCHAIN_PATH CLANG_TRIPLE KBUILD_COMPILER_STRING CROSS_COMPILE MAKE

# Caster configurations
MAINGROUP_ID="-1001371047577"
BUILDSCAPERER_ID="-1001153251064"
STICKER="CAADBAADNwADp8uuGBHV2tl40w7WAg"

export MAINGROUP_ID BUILDSCAPERER_ID STICKER

# Sticc function
function tg_sendstick() {
	curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendSticker" \
		-d sticker="${STICKER}" \
		-d chat_id=${BUILDSCAPERER_ID} >>/dev/null
}

# Push to Channel
function push() {
	"${TELEGRAM}" -f "${ZIP_DIR}/$ZIPNAME" \
		-c ${BUILDSCAPERER_ID}
}

# sendcast to group
function tg_sendinfo() {
	"${TELEGRAM}" -c ${MAINGROUP_ID} -H \
		"$(
			for POST in "${@}"; do
				echo "${POST}"
			done
		)"
}

# sendcast to channel
function tg_channelcast() {
	"${TELEGRAM}" -c ${BUILDSCAPERER_ID} -H \
		"$(
			for POST in "${@}"; do
				echo "${POST}"
			done
		)"
}

function kickstart() {
	tg_sendinfo "Compilation Started!"

	tg_channelcast "Compiler <code>${COMPILER_USED}</code>" \
		"Device <b>${DEVICE}</b>" \
		"Branch <code>${PARSE_BRANCH}</code>" \
		"Commit Point <code>${COMMIT_POINT}</code>" \
		"Under <code>$(hostname)</code>" \
		"Started on <code>$(whoami)</code>"
}

# Whenever build is interrupted by purpose, report it
trap '{
    tg_intstick
    tg_intstickmain
    exit 130
}' INT

# Interruption Happen, report with sticker
function tg_intstick() {
	curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendSticker" \
		-d sticker="CAADAQADFQADlS0LHvIFwsaTaVjGAg" \
		-d chat_id=${BUILDSCAPERER_ID} >>/dev/null
}

function tg_intstickmain() {
	curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendSticker" \
		-d sticker="CAADAQADFQADlS0LHvIFwsaTaVjGAg" \
		-d chat_id=${MAINGROUP_ID} >>/dev/null
}

# Whenever errors occured, report them
function tg_senderror() {
	tg_sendinfo "Build Throwing Error(s)" \
		"@raphielscape naaaaa"
	tg_channelcast "Build Throwing Error(s)"
	[[ ! -z ${STATUS} ]] &&
		exit "${STATUS}" ||
		exit 1
}

# Announce the completion
function tg_yay() {
	tg_sendinfo "Compilation for ${DEVICE} Completed yay" \
		"Haha yes"
}

# Fin Prober
function fin() {
	header "Yay! My works took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds.~"
	tg_sendinfo "Build took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds"
	tg_yay
}

# Errored Prober
function finerr() {
	header "My works took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds but it's error..."
	tg_sendinfo "$(echo -e "Build took $((DIFF / 60)) minute(s) and $((DIFF % 60)) seconds\\nbut it's error...")"
	tg_senderror
	exit 1
}

# Some Relatable Aliases
function copy() {
	command cp -vR "${@}"
}

function delett() {
	command rm -vrf "${@}"
}
