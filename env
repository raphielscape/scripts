#!/usr/bin/env bash
# shellcheck source=/dev/null
#
# Copyright (C) 2018 Raphielscape LLC.
#
# Licensed under the Raphielscape Public License, Version 1.0 (the "License");
# you may not use this file except in compliance with the License.
#
# Environment container

# Export script directory at the beginning
SCRIPTDIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# Import stack
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/stacks/stackies

# Sourcedir
SRCDIR="${KERNELDIR}"
OUTDIR="${KERNELDIR}/out"

# Parser
PARSE_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
PARSE_ORIGIN="$(git config --get remote.origin.url)"
COMMIT_POINT="$(git log --pretty=format:'%h : %s' -1)"

TELEGRAM_TOKEN=${BOT_API_KEY}

export TELEGRAM_TOKEN PARSE_BRANCH PARSE_ORIGIN COMMIT_POINT SRCDIR OUTDIR

kernelbox() {
    ANYKERNEL="${HOME}/working/AnyKernel2"
    ZIP_DIR="${HOME}/working/weeb_zip"
}

export ANYKERNEL ZIP_DIR KBUILD_BUILD_USER TOOLCHAIN

# Delett Old AnyKernel in Aroma dir if exists
rm -rf "${ANYKERNEL_DONE}"

prepare_clang() {
    header "We're building Clang bois" "${GREEN}"

    # Clang configurations
    if [ "${WORKER}" = raphielbox ]; then
        PATH=${HOME}/toolchains/clang-9.x/bin/:$PATH
        PATH=${HOME}/working/arm-linux-gnueabi-8.x/bin:$PATH
            if [ "${SELFGCC}" = true ]; then
                PATH=${HOME}/x-tools/aarch64-raphiel-linux-gnu/bin:$PATH
                CROSS_COMPILE="aarch64-raphiel-linux-gnu-"
            else
                CROSS_COMPILE="aarch64-linux-gnu-"
            fi
        CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
        CLANG_TRIPLE="aarch64-linux-gnu-"
    else
        PATH=$(pwd)/LLVM/CLANG/bin:$PATH
        PATH=$(pwd)/GNU/GCC/bin:$PATH
        PATH=$(pwd)/GNU/ARMGCC/bin:$PATH
        CROSS_COMPILE_ARM32="${SCRIPTDIR}/ccachewrapper arm-linux-gnueabi-"
        CROSS_COMPILE="aarch64-raphiel-linux-"
        CLANG_TRIPLE="aarch64-linux-gnu-"
    fi

    CLANG_TCHAIN="${SCRIPTDIR}/ccachewrapper clang"
    CLANG_LD=aarch64-raphiel-linux-gnu-ld.bfd

    # Kbuild Sets
    # KBUILD_COMPILER_STRING="$(${CLANG_TCHAIN} --version | head -n 1 |
    # perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"

    # Export compiler for announcer
    COMPILER_USED="$(${CLANG_TCHAIN} --version | head -n 1 |
    perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
    CU=clang

    # Scream out the Clang compiler used
    header "Using toolchain: $(${CLANG_TCHAIN} --version | head -n 1 |
    perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"

    header "Using cross-compiler: $("${CROSS_COMPILE}"gcc --version | head -1)"
}

prepare_gcc() {
    if [ "${WORKER}" = raphielbox ]; then
        PATH=${HOME}/working/arm-linux-gnueabi-8.x/bin:$PATH
        PATH=${HOME}/x-tools/aarch64-raphiel-elf/bin:$PATH
        COMPILER_USED="$(aarch64-raphiel-elf-gcc --version | head -1)"

        # Set Cross Compile
        CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
        CROSS_COMPILE="${SCRIPTDIR}/ccachewrapper aarch64-raphiel-elf-"

        GCC_LD=aarch64-raphiel-elf-ld.bfd

        # Announce what compiler we use
        header "Using toolchain: $(aarch64-raphiel-elf-gcc --version | head -1)"
    else
        # Set path for Semaphore GCC location
        ARM64CC=$(pwd)/GNU/GCC/bin/aarch64-raphiel-linux-gnu-
        COMPILER_USED="$(./GNU/GCC/bin/aarch64-raphiel-linux-gnu-gcc--version | head -1)"

        # Set Cross Compile
        CROSS_COMPILE_ARM32="$(pwd)/GNU/ARMGCC/bin/arm-linux-gnueabi-"
        CROSS_COMPILE="${SCRIPTDIR}/ccachewrapper" ${ARM64CC}

        GCC_LD=$(pwd)/GNU/GCC/aarch64-raphiel-linux-gnu-ld.bfd

        # Announce what compiler we use
        header "Using toolchain: $(./GNU/GCC/bin/aarch64-raphiel-linux-gnu-gcc--version | head -1)"
    fi

    # Announce that our current compiler is GCC
    CU=gcc
}

# Examine our compilation threads
# 2x of our available CPUs
CPU="$(grep -c '^processor' /proc/cpuinfo)"
JOBS="$(( ${CPU} * 2 ))"

build() {
    if [ $CU = clang ]; then
        make -j${JOBS} O="${OUTDIR}" CC="${CLANG_TCHAIN}" \
        LD="${CLANG_LD}" HOSTCC="${CLANG_TCHAIN}" \
        HOSTLD="${CLANG_LD}" "$@"
    else
        make -j${JOBS} O="${OUTDIR}" LD="${GCC_LD}" "$@"
    fi
}

# Then export the stuff
export PATH CU COMPILER_USED CLANG_TCHAIN TCHAIN_PATH CLANG_TRIPLE KBUILD_COMPILER_STRING CROSS_COMPILE CROSS_COMPILE_ARM32 MAKE

# Whenever build is interrupted by purpose, report it
trap '{
    tg_intgif
    tg_intgifmain
    exit 130
}' INT