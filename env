#!/usr/bin/env bash
# shellcheck source=/dev/null
#
# Copyright (C) 2019 Raphielscape LLC.
#
# Licensed under the Raphielscape Public License, Version 1.c (the "License");
# you may not use this file except in compliance with the License.
#
# Environment container

# Export script directory at the beginning
SCRIPTDIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"

# Import stack
. "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/stacks/stackies

# Sourcedir
SRCDIR="${KERNELDIR}"
OUTDIR="${KERNELDIR}/out"

# Parser
PARSE_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
PARSE_ORIGIN="$(git config --get remote.origin.url)"
COMMIT_POINT="$(git log --pretty=format:'%h : %s' -1)"

TELEGRAM_TOKEN=${BOT_API_KEY}

# ClangBuiltLinux's tc-build build directory
CBL_DIR=$HOME/scripts/clang-build

export TELEGRAM_TOKEN PARSE_BRANCH PARSE_ORIGIN COMMIT_POINT SRCDIR OUTDIR CBL_DIR

# Delett Old AnyKernel in Aroma dir if exists
rm -rf "${ANYKERNEL_DONE}"

case $WORKER in
    raphielbox)
        case $COMPILER in
            Clang)
                PATH=${HOME}/toolchains/binutils/bin/:$PATH
                PATH=${HOME}/toolchains/clang/bin/:$PATH
                PATH=${HOME}/working/arm-linux-gnueabi-8.x/bin:$PATH
                LD_LIBRARY_PATH=${HOME}/working/arm-linux-gnueabi-8.x/lib/:$LD_LIBRARY_PATH
                LD_LIBRARY_PATH=${HOME}/toolchains/clang/lib/:$LD_LIBRARY_PATH
                LD_LIBRARY_PATH=${HOME}/toolchains/binutils/lib/:$LD_LIBRARY_PATH
            ;;
            GCC)
                PATH=${HOME}/working/arm-linux-gnueabi-8.x/bin:$PATH
                PATH=${HOME}/x-tools/aarch64-raphiel-elf/bin:$PATH
                LD_LIBRARY_PATH=${HOME}/working/arm-linux-gnueabi-8.x/lib/:$LD_LIBRARY_PATH
                LD_LIBRARY_PATH=${HOME}/x-tools/aarch64-raphiel-elf/lib:$LD_LIBRARY_PATH
        esac
    ;;
    docker)
        PATH=/drone/src/armcc/bin:$PATH
        PATH=/drone/src/arm64cc/bin:$PATH
        LD_LIBRARY_PATH=/drone/src/armcc/lib/:$LD_LIBRARY_PATH
        LD_LIBRARY_PATH=/drone/src/arm64cc/lib/:$LD_LIBRARY_PATH
esac

export PATH LD_LIBRARY_PATH

prepare_compiler() {
    # Clang configurations
    case $COMPILER in
        Clang)
            CROSS_COMPILE="aarch64-linux-gnu-"
            CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
            CLANG_TRIPLE="aarch64-linux-gnu-"
            case $WORKER in
                raphielbox)
                    CC="clang"
                    AS="llvm-as"
                    LD="ld.lld"

                    AR="llvm-ar"
                    NM="llvm-nm"
                    STRIP="llvm-strip"
                    OBJCOPY="llvm-objcopy"
                    OBJDUMP="llvm-objdump"
                    OBJSIZE="llvm-objsize"
                ;;
                docker)
                    CC="clang-11"
                    AS="llvm-as-11"
                    LD="ld.lld-11"

                    AR="llvm-ar-11"
                    NM="llvm-nm-11"
                    STRIP="llvm-strip-11"
                    OBJCOPY="llvm-objcopy-11"
                    OBJDUMP="llvm-objdump-11"
                    OBJSIZE="llvm-objsize-11"
            esac
        ;;
        GCC)
            CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
            CROSS_COMPILE="aarch64-raphiel-elf-"
            LD=aarch64-raphiel-elf-ld
    esac
}

export CROSS_COMPILE

compilerannounce() {
    case $COMPILER in
        Clang)
            COMPILER_USED="$(${CC} --version | head -n 1 |
            perl -pe 's/\(http.*?\)//gs' | sed -e 's/  */ /g')"
        ;;
        GCC)
            COMPILER_USED="$("${CROSS_COMPILE}"gcc --version | head -1)"
    esac
    LINKER_USED="$(${LD} --version | head -1)"

    # Scream out the Clang compiler used
    header "Using Toolchain: ${COMPILER_USED}"
    header "Using Linker: ${LINKER_USED}"
}

export CROSS_COMPILE_ARM32

build() {
    # Examine our compilation threads
    # 2x of our available CPUs
    CPU="$(grep -c '^processor' /proc/cpuinfo)"
    JOBS="$(( CPU + 4 ))"

    case $COMPILER in
        Clang)
            make -j${JOBS} O="${OUTDIR}" CC="${CC}" LD="${LD}" AS="${AS}" \
            AR="${AR}" AR="${AR}" NM="${NM}" STRIP="${STRIP}" OBJCOPY="${OBJCOPY}" \
            OBJDUMP="${OBJDUMP}" OBJSIZE="${OBJSIZE}" CLANG_TRIPLE="${CLANG_TRIPLE}" "$@"
        ;;
        GCC)
            make -j${JOBS} O="${OUTDIR}" LD="${LD}" "$@"
        ;;
        *)
            header "Invalid compiler"
    esac
}

clone() {
	command git clone --depth 1 "${@}"
}

# ClangBuiltLinux's build-llvm.py wrapper
build-clang() {
    local ARCH INSTALL_DIR
    ARCH="AArch64;ARM;X86"
    INSTALL_DIR=${HOME}/toolchains/clang

    [[ ! -f $SCRIPTDIR/clang-build/.git ]] && { warn "Please init the submodule before continuing."; return 1; }
    [[ -d "$INSTALL_DIR" ]] && { rm -rf "${INSTALL_DIR}"-old; mv -f "$INSTALL_DIR"{,-old}; }

    "$SCRIPTDIR"/clang-build/build-llvm.py -B "$CBL_DIR" -I "$INSTALL_DIR" -t $ARCH --lto thin -m native -u --clang-vendor Android
}

# ClangBuiltLinux's build-binutils.py wrapper
build-binutils() {
    local ARCH INSTALL_DIR
    ARCH=( aarch64 arm x86_64 )
    INSTALL_DIR=${HOME}/toolchains/binutils

    [[ ! -f $SCRIPTDIR/clang-build/.git ]] && { warn "Please init the submodule before continuing."; return 1; }
    [[ -d "$INSTALL_DIR" ]] && { rm -rf "${INSTALL_DIR}"-old; mv -f "$INSTALL_DIR"{,-old}; }

    "$SCRIPTDIR"/clang-build/build-binutils.py -B "$CBL_DIR" -I "$INSTALL_DIR" -t "${ARCH[@]}" -u
}

# Whenever build is interrupted by purpose, report it
trap '{
    tg_intgif
    tg_intgifmain
    exit 130
}' INT
